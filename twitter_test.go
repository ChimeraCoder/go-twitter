package twitter

import "testing"

const kId = 5641609144;


func TestStatusWellFormed(t *testing.T) {
  api := NewApi();
  errors := api.GetErrorChannel();
  status := make([]Status, 2);
  var id int64 = kId;

  statusChan, _ := api.GetStatusAsync(kId);
  status[1], _ = api.GetStatus(kId);
  status[0] = <-statusChan;

  if !StatusEqual(status[0], status[1]) {
    t.Errorf("GetStatusAsync(%d) != GetStatus(%d), expected ==", id, id);
  }

  s := status[0];

  if IsEmpty(s.AsJsonString()) {
    t.Error("Status.AsJsonString() is empty, expected not empty");
  }

  if s.GetId() <= 0 {
    t.Error("Status.GetId() is <= 0, expected > 0");
  }

  if IsEmpty(s.GetCreatedAt()) {
    t.Error("Status.GetCreatedAt() is empty, expected not empty");
  }

  if IsEmpty(s.GetText()) {
    t.Error("Status.GetText() is empty, expected not empty");
  }

  err, hasErrors := <-errors;
  if hasErrors {
    t.Log("Errors generated by GoTwitter:");
    t.Error(err.String());
  }
}

func IsEmpty(s string) bool {
  return len(s) == 0;
}

func StatusEqual(a, b Status) bool {
  return a.AsJsonString() == b.AsJsonString() &&
         a.GetCreatedAt() == b.GetCreatedAt() &&
         a.GetCreatedAtInSeconds() == b.GetCreatedAtInSeconds() &&
         a.GetFavorited() == b.GetFavorited() &&
         a.GetId() == b.GetId() &&
         a.GetInReplyToScreenName() == b.GetInReplyToScreenName() &&
         a.GetInReplyToStatusId() == b.GetInReplyToStatusId() &&
         a.GetInReplyToUserId() == b.GetInReplyToUserId() &&
         a.GetNow() == b.GetNow();
}
