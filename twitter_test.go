//
// Copyright 2009 Bill Casarin <billcasarin@gmail.com>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
package twitter

import "testing"
import "os"

const kId = 5641609144;

func TestValidStatus(t *testing.T) {
  api := NewApi();
  errors := api.GetErrorChannel();

  status := <-api.GetStatus(kId);

  verifyValidStatus(status, t);
  verifyValidUser(status.GetUser(), t);
  getAllApiErrors(errors, t);
}

func TestValidFollowerList(t *testing.T) {
  api := NewApi();
  errors := api.GetErrorChannel();
  users := <-api.GetFollowers("jb55", 0);

  for _, user := range users {
    verifyValidUser(user, t);
    verifyValidStatus(user.GetStatus(), t);
  }

  getAllApiErrors(errors, t);
}

func TestValidPublicTimeLine(t *testing.T) {
  api := NewApi();
  errors := api.GetErrorChannel();
  statuses := <-api.GetPublicTimeline();
  length := len(statuses);

  if length <= 1 {
    t.Errorf("len(GetPublicTimeline()) <= 1, got %d expected > 1", length);
  }

  if StatusEqual(statuses[0], statuses[1]) {
    t.Errorf("GetPublicTimeline()[0] == GetPublicTimeline()[1], expected different");
  }

  t.Logf("Number of Statuses retrieved: %d", length);
  for _, status := range statuses {
    verifyValidStatus(status, t);
  }

  getAllApiErrors(errors, t);
}

// Authfile: .twitterauth
// Format: single line, two words
//    username password
func authFromFile() {
  return;
}

func verifyValidUser(u User, t *testing.T) {
  assertGreaterThanZero(u.GetId(), "GetId", t);
  assertNotEmpty(u.GetScreenName(), "GetScreenName", t);
  assertNotEmpty(u.GetName(), "GetName", t);
  assertNotNil(u.GetStatus(), "GetStatus", t);
  assertNotEmpty(u.GetScreenName(), "GetScreenName", t);
}

func verifyValidStatus(s Status, t *testing.T) {
  assertGreaterThanZero(s.GetId(), "GetId", t);
  assertNotEmpty(s.GetCreatedAt(), "GetCreatedAt", t);
  assertNotEmpty(s.GetText(), "GetText", t);
  assertNotNil(s.GetUser(), "GetUser", t);
}

func getAllApiErrors(errors chan os.Error, t *testing.T) {
  if len(errors) == 0 {
    return;
  }
  t.Log("--- Errors generated by GoTwitter START ----");
  for ;; {
    err, hasErrors := <-errors;
    if hasErrors {
      t.Log(err.String());
    } else {
      break;
    }
  }
  t.Error("--- Errors generated by GoTwitter END ----");
}

func IsEmpty(s string) bool {
  return len(s) == 0;
}

func assertGreaterThanZero(i int64, fn string, t *testing.T) {
  if i <= 0 {
    t.Errorf("%s is <= 0, got %d expected > 0", fn, i);
  }
}

func assertNotEmpty(s, fn string, t *testing.T) {
  if IsEmpty(s) {
    t.Errorf("%s is empty, expected not empty", fn);
  }
}

func assertNotNil(i interface{}, fn string, t *testing.T) {
  if i == nil {
    t.Errorf("%s is nil, expected not nil", fn);
  }
}

func StatusEqual(a, b Status) bool {
  return a.GetCreatedAt() == b.GetCreatedAt() &&
         a.GetCreatedAtInSeconds() == b.GetCreatedAtInSeconds() &&
         a.GetFavorited() == b.GetFavorited() &&
         a.GetId() == b.GetId() &&
         a.GetInReplyToScreenName() == b.GetInReplyToScreenName() &&
         a.GetInReplyToStatusId() == b.GetInReplyToStatusId() &&
         a.GetInReplyToUserId() == b.GetInReplyToUserId() &&
         a.GetNow() == b.GetNow();
}
