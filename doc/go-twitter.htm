<!--
	Copyright 2009 The Go Authors. All rights reserved.
	Use of this source code is governed by a BSD-style
	license that can be found in the LICENSE file.
-->

	<!-- PackageName is printed as title by the top-level template -->
		<p><code>import "twitter"</code></p>
	<p>
Copyright 2009 Bill Casarin &lt;billcasarin@gmail.com&gt;
</p>
<p>
Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
</p>
<pre>http://www.apache.org/licenses/LICENSE-2.0
</pre>
<p>
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &#34;AS IS&#34; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
</p>

			<p>
			<h4>Package files</h4>
			<span style="font-size:90%">
				<a href="../api.go">api.go</a>
				<a href="../cache.go">cache.go</a>
				<a href="../hacks.go">hacks.go</a>
				<a href="../http_auth.go">http_auth.go</a>
				<a href="../status.go">status.go</a>
				<a href="../user.go">user.go</a>
				<a href="../util.go">util.go</a>
			</span>
			</p>
			<h2>type <a href="../api.go#L58"><a id="L58"></a>Api</a></h2>
			
			<p><pre><a id="L58"></a>type Api struct {
    // contains unexported fields
<a id="L66"></a>}</pre></p>
				<h3>func <a href="../api.go#L74">NewApi</a></h3>
				<p><code><a id="L74"></a>func NewApi() *Api</code></p>
				<p>
Creates and initializes new Api objec
</p>

				<h3>func (<a id="L325"></a>*Api) <a href="../api.go#L325">Authenticate</a></h3>
				<p><code><a id="L325"></a>func (self *Api) Authenticate(username, password string)</code></p>
				<p>
Sets the username and password string for all subsequent authorized
HTTP requests
</p>

				<h3>func (<a id="L354"></a>*Api) <a href="../api.go#L354">GetErrorChannel</a></h3>
				<p><code><a id="L354"></a>func (self *Api) GetErrorChannel() &lt;-chan os.Error</code></p>
				<p>
Returns a channel which receives API errors. Can be used for logging
errors.
</p>
<pre>monitorErrors - listens to api errors and logs them

func monitorErrors(quit chan bool, errors chan os.Error) {
  for ;; {
    select {
    case err := &lt;-errors:
      fmt.Fprintf(os.Stderr, err.String());
      break;
    case &lt;-quit:
      return;
    }
  }
}
</pre>

				<h3>func (<a id="L108"></a>*Api) <a href="../api.go#L108">GetFollowers</a></h3>
				<p><code><a id="L108"></a>func (self *Api) GetFollowers(user interface{}, page int) &lt;-chan []User</code></p>
				<p>
Gets the followers for a given user represented by a slice
of twitter.User instances
</p>
<p>
user:
</p>
<pre>A user id or name to fetch the followers from. If this argument
is nil, then the followers are fetched from the authenticated user.
This paramater must be an int, int64, or string.
</pre>
<p>
page:
</p>
<pre>Not yet implemented
</pre>

				<h3>func (<a id="L122"></a>*Api) <a href="../api.go#L122">GetFriends</a></h3>
				<p><code><a id="L122"></a>func (self *Api) GetFriends(user interface{}, page int) &lt;-chan []User</code></p>
				<p>
Gets the friends for a given user represented by a slice
of twitter.User instances
</p>
<p>
user:
</p>
<pre>A user id or name to fetch the friends from. If this argument
is nil, then the friends are fetched from the authenticated user.
This paramater must be an int, int64, or string.
</pre>
<p>
page:
</p>
<pre>Not yet implemented
</pre>

				<h3>func (<a id="L172"></a>*Api) <a href="../api.go#L172">GetFriendsTimeline</a></h3>
				<p><code><a id="L172"></a>func (self *Api) GetFriendsTimeline() &lt;-chan []Status</code></p>
				<p>
Returns the 20 most recent statuses posted by the authenticating user and
that user&#39;s friends. This is the equivalent of /timeline/home on the Web.
Returns the statuses as a slice of Status objects
</p>

				<h3>func (<a id="L88"></a>*Api) <a href="../api.go#L88">GetLastError</a></h3>
				<p><code><a id="L88"></a>func (self *Api) GetLastError() os.Error</code></p>
				<p>
Returns the last error sent to the error channel.
Calling this function pops the last error, subsequent calls will be nil
unless another error has occured.
</p>

				<h3>func (<a id="L149"></a>*Api) <a href="../api.go#L149">GetPublicTimeline</a></h3>
				<p><code><a id="L149"></a>func (self *Api) GetPublicTimeline() &lt;-chan []Status</code></p>
				<p>
Retrieves the public timeline as a slice of Status objects
</p>

				<h3>func (<a id="L184"></a>*Api) <a href="../api.go#L184">GetReplies</a></h3>
				<p><code><a id="L184"></a>func (self *Api) GetReplies() &lt;-chan []Status</code></p>
				<p>
Returns the 20 most recent mentions for the authenticated user
Returns the statuses as a slice of Status objects
</p>

				<h3>func (<a id="L395"></a>*Api) <a href="../api.go#L395">GetStatus</a></h3>
				<p><code><a id="L395"></a>func (self *Api) GetStatus(id int64) &lt;-chan Status</code></p>
				<p>
Gets a Twitter status given a status id
</p>
<p>
The twitter.Api instance must be authenticated if the status message
is private
</p>
<p>
Returns: a channel which receives a twitter.Status object when
</p>
<pre>the request is completed
</pre>

				<h3>func (<a id="L160"></a>*Api) <a href="../api.go#L160">GetUserTimeline</a></h3>
				<p><code><a id="L160"></a>func (self *Api) GetUserTimeline() &lt;-chan []Status</code></p>
				<p>
Retrieves the currently authorized user&#39;s
timeline as a slice of Status objects
</p>

				<h3>func (<a id="L144"></a>*Api) <a href="../api.go#L144">HasErrors</a></h3>
				<p><code><a id="L144"></a>func (self *Api) HasErrors() bool</code></p>
				<p>
Checks to see if there are any errors in the error channel
</p>

				<h3>func (<a id="L332"></a>*Api) <a href="../api.go#L332">Logout</a></h3>
				<p><code><a id="L332"></a>func (self *Api) Logout()</code></p>
				<p>
Disable Twitter authentication, subsequent REST calls will not use
Authentication
</p>

				<h3>func (<a id="L361"></a>*Api) <a href="../api.go#L361">PostUpdate</a></h3>
				<p><code><a id="L361"></a>func (self *Api) PostUpdate(status string, inReplyToId int64) &lt;-chan bool</code></p>
				<p>
Post a Twitter status message to the authenticated user
</p>
<p>
The twitter.Api instance must be authenticated
</p>

				<h3>func (<a id="L94"></a>*Api) <a href="../api.go#L94">SetCacheBackend</a></h3>
				<p><code><a id="L94"></a>func (self *Api) SetCacheBackend(backend *CacheBackend)</code></p>
				
				<h3>func (<a id="L307"></a>*Api) <a href="../api.go#L307">SetClientString</a></h3>
				<p><code><a id="L307"></a>func (self *Api) SetClientString(client string)</code></p>
				<p>
Sets the Twitter client header, aka the X-Twitter-Client http header on
all POST operations
</p>

				<h3>func (<a id="L416"></a>*Api) <a href="../api.go#L416">SetReceiveChannel</a></h3>
				<p><code><a id="L416"></a>func (self *Api) SetReceiveChannel(receiveChannel interface{})</code></p>
				
			<h2>type <a href="../cache.go#L35"><a id="L35"></a>Cache</a></h2>
			
			<p><pre><a id="L35"></a>type Cache interface {
    <a id="L36"></a>// Stores a value in the database, the key is determined
    <a id="L37"></a>// by the GetId() function in the IdProvider interface
    <a id="L38"></a>Store(data IdProvider);

    <a id="L40"></a>// Checks to see if the cache contains a given key
    <a id="L41"></a>HasId(id int64) bool;

    <a id="L43"></a>// Gets a value from the cache
    <a id="L44"></a>Get(id int64) IdProvider;

    <a id="L46"></a>// Gets the time a given key was stored
    <a id="L47"></a>GetTimeStored(id int64) int64;
<a id="L48"></a>}</pre></p>
			<h2>type <a href="../cache.go#L50"><a id="L50"></a>CacheBackend</a></h2>
			
			<p><pre><a id="L50"></a>type CacheBackend struct {
    // contains unexported fields
<a id="L54"></a>}</pre></p>
				<h3>func <a href="../cache.go#L120">NewCacheBackend</a></h3>
				<p><code><a id="L120"></a>func NewCacheBackend(user Cache, status Cache, expireTime int64) *CacheBackend</code></p>
				<p>
Creates a custom cache backend
</p>

				<h3>func (<a id="L105"></a>*CacheBackend) <a href="../cache.go#L105">GetStatus</a></h3>
				<p><code><a id="L105"></a>func (self *CacheBackend) GetStatus(id int64) Status</code></p>
				
				<h3>func (<a id="L101"></a>*CacheBackend) <a href="../cache.go#L101">GetUser</a></h3>
				<p><code><a id="L101"></a>func (self *CacheBackend) GetUser(id int64) User</code></p>
				
				<h3>func (<a id="L114"></a>*CacheBackend) <a href="../cache.go#L114">HasStatusExpired</a></h3>
				<p><code><a id="L114"></a>func (self *CacheBackend) HasStatusExpired(id int64) bool</code></p>
				
				<h3>func (<a id="L109"></a>*CacheBackend) <a href="../cache.go#L109">HasUserExpired</a></h3>
				<p><code><a id="L109"></a>func (self *CacheBackend) HasUserExpired(id int64) bool</code></p>
				
				<h3>func (<a id="L97"></a>*CacheBackend) <a href="../cache.go#L97">StoreStatus</a></h3>
				<p><code><a id="L97"></a>func (self *CacheBackend) StoreStatus(status Status)</code></p>
				
				<h3>func (<a id="L93"></a>*CacheBackend) <a href="../cache.go#L93">StoreUser</a></h3>
				<p><code><a id="L93"></a>func (self *CacheBackend) StoreUser(user User)</code></p>
				
			<h2>type <a href="../cache.go#L22"><a id="L22"></a>IdProvider</a></h2>
			
			<p><pre><a id="L22"></a>type IdProvider interface {
    <a id="L23"></a>GetId() int64;
<a id="L24"></a>}</pre></p>
			<h2>type <a href="../cache.go#L31"><a id="L31"></a>MemoryCache</a></h2>
			
			<p><pre><a id="L31"></a>type MemoryCache struct {
    // contains unexported fields
<a id="L33"></a>}</pre></p>
				<h3>func <a href="../cache.go#L130">NewMemoryCache</a></h3>
				<p><code><a id="L130"></a>func NewMemoryCache() *MemoryCache</code></p>
				
				<h3>func (<a id="L77"></a>*MemoryCache) <a href="../cache.go#L77">Get</a></h3>
				<p><code><a id="L77"></a>func (self *MemoryCache) Get(id int64) IdProvider</code></p>
				
				<h3>func (<a id="L85"></a>*MemoryCache) <a href="../cache.go#L85">GetTimeStored</a></h3>
				<p><code><a id="L85"></a>func (self *MemoryCache) GetTimeStored(id int64) int64</code></p>
				
				<h3>func (<a id="L72"></a>*MemoryCache) <a href="../cache.go#L72">HasId</a></h3>
				<p><code><a id="L72"></a>func (self *MemoryCache) HasId(id int64) bool</code></p>
				
				<h3>func (<a id="L56"></a>*MemoryCache) <a href="../cache.go#L56">Store</a></h3>
				<p><code><a id="L56"></a>func (self *MemoryCache) Store(data IdProvider)</code></p>
				
			<h2>type <a href="../status.go#L18"><a id="L18"></a>Status</a></h2>
			
			<p><pre><a id="L18"></a>type Status interface {
    <a id="L19"></a>GetCreatedAt() string;
    <a id="L20"></a>GetCreatedAtInSeconds() int;
    <a id="L21"></a>GetFavorited() bool;
    <a id="L22"></a>GetId() int64;
    <a id="L23"></a>GetText() string;
    <a id="L24"></a>GetInReplyToScreenName() string;
    <a id="L25"></a>GetInReplyToStatusId() int64;
    <a id="L26"></a>GetInReplyToUserId() int64;
    <a id="L27"></a>GetNow() int;
    <a id="L28"></a>GetUser() User;
<a id="L29"></a>}</pre></p>
			<h2>type <a href="../api.go#L54"><a id="L54"></a>TwitterError</a></h2>
			
			<p><pre><a id="L54"></a>type TwitterError struct {
    // contains unexported fields
<a id="L56"></a>}</pre></p>
				<h3>func (<a id="L69"></a>TwitterError) <a href="../api.go#L69">String</a></h3>
				<p><code><a id="L69"></a>func (self TwitterError) String() string</code></p>
				<p>
type that satisfies the os.Error interface
</p>

			<h2>type <a href="../user.go#L18"><a id="L18"></a>User</a></h2>
			
			<p><pre><a id="L18"></a>type User interface {
    <a id="L19"></a>GetId() int64;
    <a id="L20"></a>GetName() string;
    <a id="L21"></a>GetScreenName() string;
    <a id="L22"></a>GetLocation() string;
    <a id="L23"></a>GetDescription() string;
    <a id="L24"></a>GetProfileImageUrl() string;
    <a id="L25"></a>GetProfileBackgroundTitle() bool;
    <a id="L26"></a>GetProfileBackgroundImageUrl() string;
    <a id="L27"></a>GetProfileSidebarFillColor() string;
    <a id="L28"></a>GetProfileLinkColor() string;
    <a id="L29"></a>GetProfileTextColor() string;
    <a id="L30"></a>GetProtected() bool;
    <a id="L31"></a>GetUtcOffset() int;
    <a id="L32"></a>GetTimeZone() string;
    <a id="L33"></a>GetURL() string;
    <a id="L34"></a>GetStatus() Status;
    <a id="L35"></a>GetStatusesCount() int;
    <a id="L36"></a>GetFollowersCount() int;
    <a id="L37"></a>GetFriendsCount() int;
    <a id="L38"></a>GetFavoritesCount() int;
<a id="L39"></a>}</pre></p>
