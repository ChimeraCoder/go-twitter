<!--
	Copyright 2009 The Go Authors. All rights reserved.
	Use of this source code is governed by a BSD-style
	license that can be found in the LICENSE file.
-->

	<!-- PackageName is printed as title by the top-level template -->
		<p><code>import "twitter"</code></p>
	<p>
Copyright 2009 Bill Casarin &lt;billcasarin@gmail.com&gt;
</p>
<p>
Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
</p>
<pre>http://www.apache.org/licenses/LICENSE-2.0
</pre>
<p>
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &#34;AS IS&#34; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
</p>

			<p>
			<h4>Package files</h4>
			<span style="font-size:90%">
				<a href="../api.go">api.go</a>
				<a href="../cache.go">cache.go</a>
				<a href="../hacks.go">hacks.go</a>
				<a href="../http_auth.go">http_auth.go</a>
				<a href="../rate_limit.go">rate_limit.go</a>
				<a href="../search.go">search.go</a>
				<a href="../status.go">status.go</a>
				<a href="../user.go">user.go</a>
				<a href="../util.go">util.go</a>
			</span>
			</p>
			<h2 id="Api">type <a href="../api.go#L63">Api</a></h2>
			
			<p><pre>type Api struct {
    // contains unexported fields
}</pre></p>
				<h3 id="Api.NewApi">func <a href="../api.go#L80">NewApi</a></h3>
				<p><code>func NewApi() *Api</code></p>
				<p>
Creates and initializes new Api objec
</p>

				<h3 id="Api.ClearCredentials">func (*Api) <a href="../api.go#L497">ClearCredentials</a></h3>
				<p><code>func (self *Api) ClearCredentials()</code></p>
				<p>
Disable Twitter authentication, subsequent REST calls will not use
Authentication
</p>

				<h3 id="Api.GetErrorChannel">func (*Api) <a href="../api.go#L519">GetErrorChannel</a></h3>
				<p><code>func (self *Api) GetErrorChannel() &lt;-chan os.Error</code></p>
				<p>
Returns a channel which receives API errors. Can be used for logging
errors.
</p>
<pre>monitorErrors - listens to api errors and logs them

func monitorErrors(quit chan bool, errors &lt;-chan os.Error) {
  for ;; {
    select {
    case err := &lt;-errors:
      fmt.Fprintf(os.Stderr, err.String());
      break;
    case &lt;-quit:
      return;
    }
  }
}
</pre>

				<h3 id="Api.GetFollowers">func (*Api) <a href="../api.go#L114">GetFollowers</a></h3>
				<p><code>func (self *Api) GetFollowers(user interface{}, page int) &lt;-chan []User</code></p>
				<p>
Gets the followers for a given user represented by a slice
of twitter.User instances
</p>
<p>
user:
</p>
<pre>A user id or name to fetch the followers from. If this argument
is nil, then the followers are fetched from the authenticated user.
This paramater must be an int, int64, or string.
</pre>
<p>
page:
</p>
<pre>Not yet implemented
</pre>

				<h3 id="Api.GetFriends">func (*Api) <a href="../api.go#L128">GetFriends</a></h3>
				<p><code>func (self *Api) GetFriends(user interface{}, page int) &lt;-chan []User</code></p>
				<p>
Gets the friends for a given user represented by a slice
of twitter.User instances
</p>
<p>
user:
</p>
<pre>A user id or name to fetch the friends from. If this argument
is nil, then the friends are fetched from the authenticated user.
This paramater must be an int, int64, or string.
</pre>
<p>
page:
</p>
<pre>Not yet implemented
</pre>

				<h3 id="Api.GetFriendsTimeline">func (*Api) <a href="../api.go#L266">GetFriendsTimeline</a></h3>
				<p><code>func (self *Api) GetFriendsTimeline() &lt;-chan []Status</code></p>
				<p>
Returns the 20 most recent statuses posted by the authenticating user and
that user&#39;s friends. This is the equivalent of /timeline/home on the Web.
Returns the statuses as a slice of Status objects
</p>

				<h3 id="Api.GetLastError">func (*Api) <a href="../api.go#L94">GetLastError</a></h3>
				<p><code>func (self *Api) GetLastError() os.Error</code></p>
				<p>
Returns the last error sent to the error channel.
Calling this function pops the last error, subsequent calls will be nil
unless another error has occured.
</p>

				<h3 id="Api.GetPublicTimeline">func (*Api) <a href="../api.go#L249">GetPublicTimeline</a></h3>
				<p><code>func (self *Api) GetPublicTimeline() &lt;-chan []Status</code></p>
				<p>
Retrieves the public timeline as a slice of Status objects
</p>

				<h3 id="Api.GetRateLimitInfo">func (*Api) <a href="../api.go#L281">GetRateLimitInfo</a></h3>
				<p><code>func (self *Api) GetRateLimitInfo() &lt;-chan RateLimit</code></p>
				<p>
Returns rate limiting information
</p>

				<h3 id="Api.GetReplies">func (*Api) <a href="../api.go#L274">GetReplies</a></h3>
				<p><code>func (self *Api) GetReplies() &lt;-chan []Status</code></p>
				<p>
Returns the 20 most recent mentions for the authenticated user
Returns the statuses as a slice of Status objects
</p>

				<h3 id="Api.GetStatus">func (*Api) <a href="../api.go#L560">GetStatus</a></h3>
				<p><code>func (self *Api) GetStatus(id int64) &lt;-chan Status</code></p>
				<p>
Gets a Twitter status given a status id
</p>
<p>
The twitter.Api instance must be authenticated if the status message
is private
</p>
<p>
Returns: a channel which receives a twitter.Status object when
</p>
<pre>the request is completed
</pre>

				<h3 id="Api.GetUser">func (*Api) <a href="../api.go#L231">GetUser</a></h3>
				<p><code>func (self *Api) GetUser(name string) &lt;-chan User</code></p>
				<p>
Returns a channel which receives a twitter.User instance for the given
username.
</p>
<p>
name:
</p>
<pre>The screenname of the user
</pre>

				<h3 id="Api.GetUserById">func (*Api) <a href="../api.go#L212">GetUserById</a></h3>
				<p><code>func (self *Api) GetUserById(id int64) &lt;-chan User</code></p>
				<p>
Returns a channel which receives a twitter.User instance for the given
username.
</p>
<p>
id:
</p>
<pre>A twiter user id
</pre>

				<h3 id="Api.GetUserTimeline">func (*Api) <a href="../api.go#L257">GetUserTimeline</a></h3>
				<p><code>func (self *Api) GetUserTimeline() &lt;-chan []Status</code></p>
				<p>
Retrieves the currently authorized user&#39;s
timeline as a slice of Status objects
</p>

				<h3 id="Api.HasErrors">func (*Api) <a href="../api.go#L246">HasErrors</a></h3>
				<p><code>func (self *Api) HasErrors() bool</code></p>
				<p>
Checks to see if there are any errors in the error channel
</p>

				<h3 id="Api.PostUpdate">func (*Api) <a href="../api.go#L526">PostUpdate</a></h3>
				<p><code>func (self *Api) PostUpdate(status string, inReplyToId int64) &lt;-chan bool</code></p>
				<p>
Post a Twitter status message to the authenticated user
</p>
<p>
The twitter.Api instance must be authenticated
</p>

				<h3 id="Api.Search">func (*Api) <a href="../api.go#L174">Search</a></h3>
				<p><code>func (self *Api) Search(query string, page int, perPage int, sinceId int, locale string, lang string) &lt;-chan []SearchResult</code></p>
				<p>
Performs a Twitter search. Returns a slice of twitter.SearchResult instances
string fields are automatically URL Encoded
query:
</p>
<pre>The string of text to search for.
</pre>
<p>
page:
</p>
<pre>The page of results to return. Set to 0 to use the default value.
</pre>
<p>
perPage:
</p>
<pre>The number of results per page. Set to 0 to use the default value.
</pre>
<p>
sinceId:
</p>
<pre>Return tweets with status ids greater than the given id. Set to 0
to use the default value.
</pre>
<p>
locale:
</p>
<pre>Specify the language of the query you are sending (only ja is currently
effective). This is intended for language-specific clients and the default
should work in the majority of cases. Set to an empty string to use
the default value.
</pre>
<p>
lang:
</p>
<pre>Restricts tweets to the given language, given by an ISO 639-1 code.
Set to an empty string to use the default value.
</pre>

				<h3 id="Api.SearchSimple">func (*Api) <a href="../api.go#L151">SearchSimple</a></h3>
				<p><code>func (self *Api) SearchSimple(query string) &lt;-chan []SearchResult</code></p>
				<p>
Performs a simple Twitter search. Returns a slice of twitter.SearchResult
instances
</p>
<p>
query:
</p>
<pre>The string of text to search for. This is URL encoded automatically.
</pre>

				<h3 id="Api.SetCache">func (*Api) <a href="../api.go#L100">SetCache</a></h3>
				<p><code>func (self *Api) SetCache(backend *CacheBackend)</code></p>
				
				<h3 id="Api.SetClientString">func (*Api) <a href="../api.go#L466">SetClientString</a></h3>
				<p><code>func (self *Api) SetClientString(client string)</code></p>
				<p>
Sets the Twitter client header, aka the X-Twitter-Client http header on
all POST operations
</p>

				<h3 id="Api.SetCredentials">func (*Api) <a href="../api.go#L490">SetCredentials</a></h3>
				<p><code>func (self *Api) SetCredentials(username, password string)</code></p>
				<p>
Sets the username and password string for all subsequent authorized
HTTP requests
</p>

				<h3 id="Api.SetReceiveChannel">func (*Api) <a href="../api.go#L589">SetReceiveChannel</a></h3>
				<p><code>func (self *Api) SetReceiveChannel(receiveChannel interface{})</code></p>
				
				<h3 id="Api.SetUserAgent">func (*Api) <a href="../api.go#L486">SetUserAgent</a></h3>
				<p><code>func (self *Api) SetUserAgent(agent string)</code></p>
				<p>
Overrides the default user agent (go-twitter)
</p>

				<h3 id="Api.SetXTwitterHeaders">func (*Api) <a href="../api.go#L298">SetXTwitterHeaders</a></h3>
				<p><code>func (self *Api) SetXTwitterHeaders(client, url, version string)</code></p>
				<p>
Set the X-Twitter HTTP headers that will be sent to the server.
</p>
<p>
client:
</p>
<pre>The client name as a string.  Will be sent to the server as
the &#39;X-Twitter-Client&#39; header.
</pre>
<p>
url:
</p>
<pre>The URL of the meta.xml as a string.  Will be sent to the server
as the &#39;X-Twitter-Client-URL&#39; header.
</pre>
<p>
version:
</p>
<pre>The client version as a string.  Will be sent to the server
as the &#39;X-Twitter-Client-Version&#39; header.
</pre>

			<h2 id="Cache">type <a href="../cache.go#L35">Cache</a></h2>
			
			<p><pre>type Cache interface {
    // Stores a value in the database, the key is determined
    // by the GetId() function in the IdProvider interface
    Store(data IdProvider)

    // Checks to see if the cache contains a given key
    HasId(id int64) bool

    // Gets a value from the cache
    Get(id int64) IdProvider

    // Gets the time a given key was stored
    GetTimeStored(id int64) int64
}</pre></p>
			<h2 id="CacheBackend">type <a href="../cache.go#L50">CacheBackend</a></h2>
			
			<p><pre>type CacheBackend struct {
    // contains unexported fields
}</pre></p>
				<h3 id="CacheBackend.NewCacheBackend">func <a href="../cache.go#L126">NewCacheBackend</a></h3>
				<p><code>func NewCacheBackend(user Cache, status Cache, expireTime int64) *CacheBackend</code></p>
				<p>
Creates a custom cache backend
</p>

				<h3 id="CacheBackend.GetStatus">func (*CacheBackend) <a href="../cache.go#L110">GetStatus</a></h3>
				<p><code>func (self *CacheBackend) GetStatus(id int64) Status</code></p>
				
				<h3 id="CacheBackend.GetUser">func (*CacheBackend) <a href="../cache.go#L105">GetUser</a></h3>
				<p><code>func (self *CacheBackend) GetUser(id int64) User</code></p>
				
				<h3 id="CacheBackend.HasStatusExpired">func (*CacheBackend) <a href="../cache.go#L120">HasStatusExpired</a></h3>
				<p><code>func (self *CacheBackend) HasStatusExpired(id int64) bool</code></p>
				
				<h3 id="CacheBackend.HasUserExpired">func (*CacheBackend) <a href="../cache.go#L115">HasUserExpired</a></h3>
				<p><code>func (self *CacheBackend) HasUserExpired(id int64) bool</code></p>
				
				<h3 id="CacheBackend.StoreStatus">func (*CacheBackend) <a href="../cache.go#L100">StoreStatus</a></h3>
				<p><code>func (self *CacheBackend) StoreStatus(status Status)</code></p>
				
				<h3 id="CacheBackend.StoreUser">func (*CacheBackend) <a href="../cache.go#L95">StoreUser</a></h3>
				<p><code>func (self *CacheBackend) StoreUser(user User)</code></p>
				
			<h2 id="IdProvider">type <a href="../cache.go#L22">IdProvider</a></h2>
			
			<p><pre>type IdProvider interface {
    GetId() int64
}</pre></p>
			<h2 id="MemoryCache">type <a href="../cache.go#L31">MemoryCache</a></h2>
			
			<p><pre>type MemoryCache struct {
    // contains unexported fields
}</pre></p>
				<h3 id="MemoryCache.NewMemoryCache">func <a href="../cache.go#L137">NewMemoryCache</a></h3>
				<p><code>func NewMemoryCache() *MemoryCache</code></p>
				
				<h3 id="MemoryCache.Get">func (*MemoryCache) <a href="../cache.go#L79">Get</a></h3>
				<p><code>func (self *MemoryCache) Get(id int64) IdProvider</code></p>
				
				<h3 id="MemoryCache.GetTimeStored">func (*MemoryCache) <a href="../cache.go#L87">GetTimeStored</a></h3>
				<p><code>func (self *MemoryCache) GetTimeStored(id int64) int64</code></p>
				
				<h3 id="MemoryCache.HasId">func (*MemoryCache) <a href="../cache.go#L74">HasId</a></h3>
				<p><code>func (self *MemoryCache) HasId(id int64) bool</code></p>
				
				<h3 id="MemoryCache.Store">func (*MemoryCache) <a href="../cache.go#L58">Store</a></h3>
				<p><code>func (self *MemoryCache) Store(data IdProvider)</code></p>
				
			<h2 id="RateLimit">type <a href="../rate_limit.go#L3">RateLimit</a></h2>
			
			<p><pre>type RateLimit interface {
    GetRemainingHits() int
    GetHourlyLimit() int
    GetResetTimeInSeconds() int64
    GetResetTime() string
}</pre></p>
			<h2 id="SearchResult">type <a href="../search.go#L3">SearchResult</a></h2>
			
			<p><pre>type SearchResult interface {
    GetCreatedAt() string
    GetFromUser() string
    GetToUserId() int64
    GetText() string
    GetId() int64
    GetFromUserId() int64
    GetGeo() string
    GetIsoLanguageCode() string
    GetSource() string
}</pre></p>
			<h2 id="Status">type <a href="../status.go#L18">Status</a></h2>
			
			<p><pre>type Status interface {
    GetCreatedAt() string
    GetCreatedAtInSeconds() int
    GetFavorited() bool
    GetId() int64
    GetText() string
    GetInReplyToScreenName() string
    GetInReplyToStatusId() int64
    GetInReplyToUserId() int64
    GetNow() int
    GetUser() User
    // contains unexported methods
}</pre></p>
			<h2 id="TwitterError">type <a href="../api.go#L59">TwitterError</a></h2>
			
			<p><pre>type TwitterError struct {
    // contains unexported fields
}</pre></p>
				<h3 id="TwitterError.String">func (TwitterError) <a href="../api.go#L77">String</a></h3>
				<p><code>func (self TwitterError) String() string</code></p>
				<p>
type that satisfies the os.Error interface
</p>

			<h2 id="User">type <a href="../user.go#L18">User</a></h2>
			
			<p><pre>type User interface {
    GetId() int64
    GetName() string
    GetScreenName() string
    GetLocation() string
    GetDescription() string
    GetProfileImageUrl() string
    GetProfileBackgroundTitle() bool
    GetProfileBackgroundImageUrl() string
    GetProfileSidebarFillColor() string
    GetProfileLinkColor() string
    GetProfileTextColor() string
    GetProtected() bool
    GetUtcOffset() int
    GetTimeZone() string
    GetURL() string
    GetStatus() Status

    GetStatusesCount() int
    GetFollowersCount() int
    GetFriendsCount() int
    GetFavoritesCount() int
    // contains unexported methods
}</pre></p>
