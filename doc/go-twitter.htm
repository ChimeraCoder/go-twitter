<!--
	Copyright 2009 The Go Authors. All rights reserved.
	Use of this source code is governed by a BSD-style
	license that can be found in the LICENSE file.
-->

	<!-- PackageName is printed as title by the top-level template -->
		<p><code>import "twitter"</code></p>
	<p>
Copyright 2009 Bill Casarin &lt;billcasarin@gmail.com&gt;
</p>
<p>
Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
</p>
<pre>http://www.apache.org/licenses/LICENSE-2.0
</pre>
<p>
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &#34;AS IS&#34; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
</p>

			<p>
			<h4>Package files</h4>
			<span style="font-size:90%">
				<a href="../api.go">api.go</a>
				<a href="../http_auth.go">http_auth.go</a>
				<a href="../status.go">status.go</a>
				<a href="../user.go">user.go</a>
				<a href="../util.go">util.go</a>
			</span>
			</p>
			<h2>type <a href="../api.go#L54"><a id="L54"></a>Api</a></h2>
			
			<p><pre><a id="L54"></a>type Api struct {
    // contains unexported fields
<a id="L61"></a>}</pre></p>
				<h3>func <a href="../api.go#L69">NewApi</a></h3>
				<p><code><a id="L69"></a>func NewApi() *Api</code></p>
				<p>
Creates and initializes new Api objec
</p>

				<h3>func (<a id="L205"></a>*Api) <a href="../api.go#L205">Authenticate</a></h3>
				<p><code><a id="L205"></a>func (self *Api) Authenticate(username, password string)</code></p>
				<p>
Sets the username and password string for all subsequent authorized
HTTP requests
</p>

				<h3>func (<a id="L234"></a>*Api) <a href="../api.go#L234">GetErrorChannel</a></h3>
				<p><code><a id="L234"></a>func (self *Api) GetErrorChannel() chan os.Error</code></p>
				<p>
Returns a channel which receives API errors. Can be used for logging
errors or pseudo-exception handling. Eg.
</p>
<pre>monitorErrors - listens to api errors and logs them

func monitorErrors(quit chan bool, errors chan os.Error) {
  for ;; {
    select {
    case err := &lt;-errors:
      fmt.Fprintf(os.Stderr, err.String());
      break;
    case &lt;-quit:
      return;
    }
  }
}
</pre>

				<h3>func (<a id="L118"></a>*Api) <a href="../api.go#L118">GetFriendsTimeline</a></h3>
				<p><code><a id="L118"></a>func (self *Api) GetFriendsTimeline() chan []Status</code></p>
				<p>
Returns the 20 most recent statuses posted by the authenticating user and
that user&#39;s friends. This is the equivalent of /timeline/home on the Web.
Returns the statuses as a slice of Status objects
</p>

				<h3>func (<a id="L83"></a>*Api) <a href="../api.go#L83">GetLastError</a></h3>
				<p><code><a id="L83"></a>func (self *Api) GetLastError() os.Error</code></p>
				<p>
Returns the last error sent to the error channel.
Calling this function pops the last error, subsequent calls will be nil
unless another error has occured.
</p>

				<h3>func (<a id="L95"></a>*Api) <a href="../api.go#L95">GetPublicTimeline</a></h3>
				<p><code><a id="L95"></a>func (self *Api) GetPublicTimeline() chan []Status</code></p>
				<p>
Retrieves the public timeline as a slice of Status objects
</p>

				<h3>func (<a id="L129"></a>*Api) <a href="../api.go#L129">GetReplies</a></h3>
				<p><code><a id="L129"></a>func (self *Api) GetReplies() chan []Status</code></p>
				<p>
Returns the 20 most recent mentions for the authenticated user
Returns the statuses as a slice of Status objects
</p>

				<h3>func (<a id="L276"></a>*Api) <a href="../api.go#L276">GetStatus</a></h3>
				<p><code><a id="L276"></a>func (self *Api) GetStatus(id int64) chan Status</code></p>
				<p>
Gets a Twitter status given a status id
</p>
<p>
The call is made asyncronously and returns instantly
returns a channel that receives the Status interface when the request
is completed
</p>
<p>
The twitter.Api instance must be authenticated if the status message
is private
</p>

				<h3>func (<a id="L106"></a>*Api) <a href="../api.go#L106">GetUserTimeline</a></h3>
				<p><code><a id="L106"></a>func (self *Api) GetUserTimeline() chan []Status</code></p>
				<p>
Retrieves the currently authorized user&#39;s
timeline as a slice of Status objects
</p>

				<h3>func (<a id="L90"></a>*Api) <a href="../api.go#L90">HasErrors</a></h3>
				<p><code><a id="L90"></a>func (self *Api) HasErrors() bool</code></p>
				<p>
Checks to see if there are any errors in the error channel
</p>

				<h3>func (<a id="L212"></a>*Api) <a href="../api.go#L212">Logout</a></h3>
				<p><code><a id="L212"></a>func (self *Api) Logout()</code></p>
				<p>
Disable Twitter authentication, subsequent REST calls will not use
Authentication
</p>

				<h3>func (<a id="L241"></a>*Api) <a href="../api.go#L241">PostUpdate</a></h3>
				<p><code><a id="L241"></a>func (self *Api) PostUpdate(status string, inReplyToId int64) chan bool</code></p>
				<p>
Post a Twitter status message to the authenticated user
</p>
<p>
The twitter.Api instance must be authenticated
</p>

				<h3>func (<a id="L192"></a>*Api) <a href="../api.go#L192">SetClientString</a></h3>
				<p><code><a id="L192"></a>func (self *Api) SetClientString(client string)</code></p>
				<p>
Sets the Twitter client header, aka the X-Twitter-Client http header on
all POST operations
</p>

				<h3>func (<a id="L283"></a>*Api) <a href="../api.go#L283">SetReceiveChannel</a></h3>
				<p><code><a id="L283"></a>func (self *Api) SetReceiveChannel(receiveChannel interface{})</code></p>
				
			<h2>type <a href="../status.go#L18"><a id="L18"></a>Status</a></h2>
			
			<p><pre><a id="L18"></a>type Status interface {
    <a id="L19"></a>GetCreatedAt() string;
    <a id="L20"></a>GetCreatedAtInSeconds() int;
    <a id="L21"></a>GetFavorited() bool;
    <a id="L22"></a>GetId() int64;
    <a id="L23"></a>GetText() string;
    <a id="L24"></a>GetInReplyToScreenName() string;
    <a id="L25"></a>GetInReplyToStatusId() int64;
    <a id="L26"></a>GetInReplyToUserId() int64;
    <a id="L27"></a>GetNow() int;
<a id="L28"></a>}</pre></p>
			<h2>type <a href="../api.go#L50"><a id="L50"></a>TwitterError</a></h2>
			
			<p><pre><a id="L50"></a>type TwitterError struct {
    // contains unexported fields
<a id="L52"></a>}</pre></p>
				<h3>func (<a id="L64"></a>TwitterError) <a href="../api.go#L64">String</a></h3>
				<p><code><a id="L64"></a>func (self TwitterError) String() string</code></p>
				<p>
type that satisfies the os.Error interface
</p>

			<h2>type <a href="../user.go#L3"><a id="L3"></a>User</a></h2>
			
			<p><pre><a id="L3"></a>type User interface {
    <a id="L4"></a>GetId() int64;
    <a id="L5"></a>GetName() string;
    <a id="L6"></a>GetScreenName() string;
    <a id="L7"></a>GetLocation() string;
    <a id="L8"></a>GetDescription() string;
    <a id="L9"></a>GetProfileImageUrl() string;
    <a id="L10"></a>GetProfileBackgroundTitle() bool;
    <a id="L11"></a>GetProfileBackgroundImageUrl() string;
    <a id="L12"></a>GetProfileSidebarFillColor() string;
    <a id="L13"></a>GetProfileBackgroundColor() string;
    <a id="L14"></a>GetProfileLinkColor() string;
    <a id="L15"></a>GetProfileTextColor() string;
    <a id="L16"></a>GetProtected() bool;
    <a id="L17"></a>GetUtcOffset() int;
    <a id="L18"></a>GetTimeZone() string;
    <a id="L19"></a>GetURL() string;
    <a id="L20"></a>GetStatus() Status;
    <a id="L21"></a>GetStatusesCount() int;
    <a id="L22"></a>GetFollowersCount() int;
    <a id="L23"></a>GetFriendsCount() int;
    <a id="L24"></a>GetFavoritesCount() int;
<a id="L25"></a>}</pre></p>
