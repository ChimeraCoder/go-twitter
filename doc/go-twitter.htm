<!--
	Copyright 2009 The Go Authors. All rights reserved.
	Use of this source code is governed by a BSD-style
	license that can be found in the LICENSE file.
-->

	<!-- PackageName is printed as title by the top-level template -->
		<p><code>import "twitter"</code></p>
	<p>
Copyright 2009 Bill Casarin &lt;billcasarin@gmail.com&gt;
</p>
<p>
Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
</p>
<pre>http://www.apache.org/licenses/LICENSE-2.0
</pre>
<p>
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &#34;AS IS&#34; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
</p>

			<p>
			<h4>Package files</h4>
			<span style="font-size:90%">
				<a href="../api.go">api.go</a>
				<a href="../http_auth.go">http_auth.go</a>
				<a href="../status.go">status.go</a>
				<a href="../util.go">util.go</a>
			</span>
			</p>
		<h2>Constants</h2>
			
			<pre><a id="L34"></a>const (
    <a id="L35"></a>QUERY_GETSTATUS      = &#34;%sstatuses/show/%d.%s&#34;;
    <a id="L36"></a>QUERY_UPDATESTATUS   = &#34;%sstatuses/update/update.%s&#34;;
    <a id="L37"></a>QUERY_PUBLICTIMELINE = &#34;%sstatuses/public_timeline.%s&#34;;
    <a id="L38"></a>QUERY_USERTIMELINE   = &#34;%sstatuses/user_timeline.%s&#34;;
<a id="L39"></a>)</pre>
			<h2>type <a href="../api.go#L45"><a id="L45"></a>Api</a></h2>
			
			<p><pre><a id="L45"></a>type Api struct {
    // contains unexported fields
<a id="L51"></a>}</pre></p>
				<h3>func <a href="../api.go#L59">NewApi</a></h3>
				<p><code><a id="L59"></a>func NewApi() *Api</code></p>
				<p>
Creates and initializes new Api objec
</p>

				<h3>func (<a id="L135"></a>*Api) <a href="../api.go#L135">Authenticate</a></h3>
				<p><code><a id="L135"></a>func (self *Api) Authenticate(username, password string)</code></p>
				<p>
Sets the username and password string for all subsequent authorized
HTTP requests
</p>

				<h3>func (<a id="L164"></a>*Api) <a href="../api.go#L164">GetErrorChannel</a></h3>
				<p><code><a id="L164"></a>func (self *Api) GetErrorChannel() chan os.Error</code></p>
				<p>
Returns a channel which receives API errors. Can be used for logging
errors or pseudo-exception handling. Eg.
</p>
<pre>monitorErrors - listens to api errors and logs them

func monitorErrors(quit chan bool, errors chan os.Error) {
  for ;; {
    select {
    case err := &lt;-errors:
      fmt.Fprintf(os.Stderr, err.String());
      break;
    case &lt;-quit:
      return;
    }
  }
}
</pre>

				<h3>func (<a id="L73"></a>*Api) <a href="../api.go#L73">GetLastError</a></h3>
				<p><code><a id="L73"></a>func (self *Api) GetLastError() os.Error</code></p>
				<p>
Returns the last error sent to the error channel.
Calling this function pops the last error, subsequent calls will be nil
unless another error has occured.
</p>

				<h3>func (<a id="L80"></a>*Api) <a href="../api.go#L80">GetPublicTimeline</a></h3>
				<p><code><a id="L80"></a>func (self *Api) GetPublicTimeline() []Status</code></p>
				<p>
Retrieves the public timeline as a slice of Status objects
</p>

				<h3>func (<a id="L207"></a>*Api) <a href="../api.go#L207">GetStatus</a></h3>
				<p><code><a id="L207"></a>func (self *Api) GetStatus(id int64) Status</code></p>
				<p>
Gets a Twitter status given a status id
</p>

				<h3>func (<a id="L198"></a>*Api) <a href="../api.go#L198">GetStatusAsync</a></h3>
				<p><code><a id="L198"></a>func (self *Api) GetStatusAsync(id int64) chan Status</code></p>
				<p>
Gets a Twitter status given a status id
</p>
<p>
The call is made asyncronously and returns instantly
returns a channel that receives the Status interface when the request
is completed
</p>
<p>
The twitter.Api instance must be authenticated if the status message
is private
</p>

				<h3>func (<a id="L89"></a>*Api) <a href="../api.go#L89">GetUserTimeline</a></h3>
				<p><code><a id="L89"></a>func (self *Api) GetUserTimeline() []Status</code></p>
				<p>
Retrieves the currently authorized user&#39;s
timeline as a slice of Status objects
</p>

				<h3>func (<a id="L142"></a>*Api) <a href="../api.go#L142">Logout</a></h3>
				<p><code><a id="L142"></a>func (self *Api) Logout()</code></p>
				<p>
Disable Twitter authentication, subsequent REST calls will not use
Authentication
</p>

				<h3>func (<a id="L171"></a>*Api) <a href="../api.go#L171">PostUpdate</a></h3>
				<p><code><a id="L171"></a>func (self *Api) PostUpdate(status string, inReplyToId int64)</code></p>
				<p>
Post a Twitter status message to the authenticated user
</p>
<p>
The twitter.Api instance must be authenticated
</p>

				<h3>func (<a id="L123"></a>*Api) <a href="../api.go#L123">SetClientString</a></h3>
				<p><code><a id="L123"></a>func (self *Api) SetClientString(client string)</code></p>
				<p>
Sets the Twitter client header, aka the X-Twitter-Client http header on
all POST operations
</p>

			<h2>type <a href="../status.go#L18"><a id="L18"></a>Status</a></h2>
			
			<p><pre><a id="L18"></a>type Status interface {
    <a id="L19"></a>GetCreatedAt() string;
    <a id="L20"></a>GetCreatedAtInSeconds() int;
    <a id="L21"></a>GetFavorited() bool;
    <a id="L22"></a>GetId() int64;
    <a id="L23"></a>GetText() string;
    <a id="L24"></a>GetInReplyToScreenName() string;
    <a id="L25"></a>GetInReplyToStatusId() int64;
    <a id="L26"></a>GetInReplyToUserId() int;
    <a id="L27"></a>GetNow() int;
<a id="L28"></a>}</pre></p>
			<h2>type <a href="../api.go#L41"><a id="L41"></a>TwitterError</a></h2>
			
			<p><pre><a id="L41"></a>type TwitterError struct {
    // contains unexported fields
<a id="L43"></a>}</pre></p>
				<h3>func (<a id="L54"></a>TwitterError) <a href="../api.go#L54">String</a></h3>
				<p><code><a id="L54"></a>func (self TwitterError) String() string</code></p>
				<p>
type that satisfies the os.Error interface
</p>

